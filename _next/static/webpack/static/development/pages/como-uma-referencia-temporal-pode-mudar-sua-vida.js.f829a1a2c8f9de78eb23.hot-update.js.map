{"version":3,"file":"static/webpack/static/development/pages/como-uma-referencia-temporal-pode-mudar-sua-vida.js.f829a1a2c8f9de78eb23.hot-update.js","sources":["webpack:///./components/PostImgColored.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PostImg from './PostImg';\n\n// Slightly modified version to quickly return a string\n// https://stackoverflow.com/a/5624139/1218980\nfunction hexToRgb(color) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    const hex = color.replace(shorthandRegex, (m, r, g, b) => (\n        r + r + g + g + b + b\n    ));\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? `rgb(${[\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16),\n    ].join(', ')})` : color;\n}\n\nfunction extractColorFromString(rgb) {\n    let [, r, g, b] = rgb.match(/rgba?\\((\\d+), ?(\\d+), ?(\\d+)/);\n    r = parseInt(r, 10);\n    g = parseInt(g, 10);\n    b = parseInt(b, 10);\n\n    return [r, g, b];\n}\n\nfunction getColorFromElement(element) {\n    const color = hexToRgb(window.getComputedStyle(element, null)['background-color']);\n\n    return extractColorFromString(color);\n}\n\nexport default class PostImgColored extends Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n\n        this.startPercentage = 0.7;\n        this.endPercentage = 0.3;\n        this.midPercentage = (this.startPercentage + this.endPercentage) / 2;\n\n        this.range = this.startPercentage - this.endPercentage;\n        this.halfRange = this.range / 2;\n\n        this.ticking = false;\n        this.didChange = false;\n\n        this.speed = 2;\n    }\n\n    componentDidMount() {\n        this.mainElement = window.document.querySelector('main');\n        this.sectionElement = window.document.querySelector('main section');\n\n        this.initialRGB = getColorFromElement(this.mainElement);\n\n        const {\n            textColor,\n            bgColor: finalRGB,\n            percentageToChangeText = 0.46,\n        } = this.props;\n\n        this.diffRGB = [\n            finalRGB[0] - this.initialRGB[0],\n            finalRGB[1] - this.initialRGB[1],\n            finalRGB[2] - this.initialRGB[2],\n        ];\n\n        window.addEventListener('scroll', this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScroll);\n    }\n\n    handleScroll = () => {\n        if (!this.ticking) {\n            this.ticking = true;\n\n            const percentage = this.getDistanceFromMidPercentage(this.getPercentageHeight());\n            console.log(percentage);\n\n            if (percentage === 0) {\n                this.ticking = false;\n                if (!this.didChange) return null;\n\n                this.didChange = false;\n                return this.mainElement.removeAttribute('style');\n            }\n\n            this.didChange = true;\n\n            window.requestAnimationFrame(() => {\n                const finalRGB = [\n                    this.initialRGB[0] + (percentage * this.diffRGB[0]),\n                    this.initialRGB[1] + (percentage * this.diffRGB[1]),\n                    this.initialRGB[2] + (percentage * this.diffRGB[2]),\n                ];\n\n                this.mainElement.setAttribute('style', `background-color: rgb(${finalRGB[0]}, ${finalRGB[1]}, ${finalRGB[2]}) !important; color: rgb(${this.props.textColor[0]}, ${this.props.textColor[1]}, ${this.props.textColor[2]}) !important;`);\n\n                this.ticking = false;\n            });\n        }\n\n        return null;\n    };\n\n\n    getPercentageHeight = () => {\n        const viewport = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\n        const elementOffset = this.ref.current.getBoundingClientRect().top;\n\n        const imageHeight = this.ref.current.querySelector('img').offsetHeight;\n        const offsetMiddle = elementOffset + (imageHeight / 2);\n\n        return offsetMiddle / viewport;\n    };\n\n    getDistanceFromMidPercentage = (height) => {\n        const dist = Math.abs(this.midPercentage - height);\n        const percentDiff = 1 - ((dist ** this.speed) / (this.halfRange ** this.speed));\n\n        return Math.max(0, percentDiff);\n    };\n\n    render() {\n        const { props } = this;\n        const { src } = props;\n\n        return (\n            <div ref={this.ref}>\n                <PostImg src={src} {...props} />\n            </div>\n        );\n    }\n}\n\nPostImgColored.propTypes = {\n    src: PropTypes.string.isRequired,\n    bgColor: PropTypes.string.isRequired,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA2CA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1EA;AA6EA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAtFA;AAwFA;AACA;AAEA;AACA;AACA;AA3FA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAdA;AAeA;AACA;;;AACA;AACA;AACA;AAEA;AAJA;AAAA;AAAA;AAAA;AAAA;AAYA;AAMA;AACA;;;AAEA;AACA;AACA;;;AAsDA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAxGA;AACA;AADA;AA2GA;AACA;AACA;AAFA;;;;A","sourceRoot":""}