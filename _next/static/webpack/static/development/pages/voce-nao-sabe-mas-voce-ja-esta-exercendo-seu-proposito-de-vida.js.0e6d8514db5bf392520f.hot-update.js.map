{"version":3,"file":"static/webpack/static/development/pages/voce-nao-sabe-mas-voce-ja-esta-exercendo-seu-proposito-de-vida.js.0e6d8514db5bf392520f.hot-update.js","sources":["webpack:///./components/PostImgColored.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PostImg from './PostImg';\n\nlet lastScrollY = 0;\nlet ticking = false;\n\n// Slightly modified version to quickly return a string\n// https://stackoverflow.com/a/5624139/1218980\nfunction hexToRgb(color) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    let hex = color.replace(shorthandRegex, function(m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? \"rgb(\" + [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16)\n    ].join(', ') + \")\" : color;\n}\n\nexport default class PostImgColored extends Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n\n        this.startPercentage = 0.6;\n        this.endPercentage = 0.2;\n\n        const mainElement = Window.document.querySelector('main');\n        this.initialBgColor = hexToRgb(window.getComputedStyle(mainElement, null)['background-color']);\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScroll);\n    }\n\n    handleScroll = () => {\n      lastScrollY = window.scrollY;\n\n        if (!ticking) {\n            window.requestAnimationFrame(() => {\n                console.log('hello');\n                console.log(this.getPercentageHeight());\n                ticking = false;\n            });\n\n            ticking = true;\n        }\n    };\n\n    getPercentageHeight = () => {\n        const viewport = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\n        const elementOffset = this.ref.current.getBoundingClientRect().top;\n\n        return elementOffset/viewport;\n    };\n\n    render() {\n        const { props } = this;\n        const { src } = props;\n\n        return (\n            <div ref={this.ref}>\n                <PostImg src={src} {...props} />\n            </div>\n        );\n    }\n}\n\nPostImgColored.propTypes = {\n    src: PropTypes.string.isRequired,\n    bgColor: PropTypes.string.isRequired,\n};\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAhCA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAEA;AACA;AAEA;AACA;AARA;AASA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAwBA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAnDA;AACA;AADA;AAsDA;AACA;AACA;AAFA;;;;A","sourceRoot":""}