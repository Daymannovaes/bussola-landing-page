{"version":3,"file":"static/webpack/static/development/pages/voce-nao-sabe-mas-voce-ja-esta-exercendo-seu-proposito-de-vida.js.ca3928d28456423c0f93.hot-update.js","sources":["webpack:///./components/PostImgColored.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PostImg from './PostImg';\n\nlet lastScrollY = 0;\nlet ticking = false;\n\n// Slightly modified version to quickly return a string\n// https://stackoverflow.com/a/5624139/1218980\nfunction hexToRgb(color) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    let hex = color.replace(shorthandRegex, function(m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? \"rgb(\" + [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16)\n    ].join(', ') + \")\" : color;\n}\n\nfunction extractColorFromString(rgb) {\n    let [, r, g, b] = rgb.match(/rgba?\\((\\d+), ?(\\d+), ?(\\d+)/);\n    r = parseInt(r, 10);\n    g = parseInt(g, 10);\n    b = parseInt(b, 10);\n\n    return [r, g, b];\n}\n\nfunction getColorFromElement(element) {\n        const color = hexToRgb(window.getComputedStyle(element, null)['background-color']);\n\n    return extractColorFromString(color);\n}\n\nexport default class PostImgColored extends Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n\n        this.startPercentage = 0.6;\n        this.endPercentage = 0.2;\n        this.midPercentage = (this.startPercentage + this.endPercentage)/2;\n\n        this.range = this.startPercentage - this.endPercentage;\n        this.halfRange = this.range/2;\n    }\n\n    componentDidMount() {\n        this.mainElement = window.document.querySelector('main');\n\n        this.initialRGB = getColorFromElement(this.mainElement);\n\n        const { bgColor: finalRGB } = this.props;\n        this.diffRGB = [\n            finalRGB[0] - this.initialRGB[0],\n            finalRGB[1] - this.initialRGB[1],\n            finalRGB[2] - this.initialRGB[2],\n        ];\n        console.log(this.initialRGB);\n        console.log(this.diffRGB);\n\n        window.addEventListener('scroll', this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScroll);\n    }\n\n    handleScroll = () => {\n      lastScrollY = window.scrollY;\n\n        if (!ticking) {\n            window.requestAnimationFrame(() => {\n                console.log('hello');\n                console.log(this.getPercentageHeight());\n                const percentage = this.getDistanceFromMidPercentage(this.getPercentageHeight());\n                console.log(percentage);\n\n                const finalRGB = [\n                    this.initialRGB[0] + (percentage * this.diffRGB[0]),\n                    this.initialRGB[1] + (percentage * this.diffRGB[1]),\n                    this.initialRGB[2] + (percentage * this.diffRGB[2]),\n                ];\n\n                console.log(finalRGB);\n\n                this.mainElement.setAttribute('style', `background-color: rgb(${finalRGB[0]}, ${finalRGB[1]}, ${finalRGB[2]}) !important;`);\n\n\n                ticking = false;\n            });\n\n            ticking = true;\n        }\n    };\n\n    getPercentageHeight = () => {\n        const viewport = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\n        const elementOffset = this.ref.current.getBoundingClientRect().top;\n\n        const imageHeight = this.ref.current.querySelector('img').offsetHeight;\n        const offsetMiddle = elementOffset + (imageHeight/2);\n\n        return offsetMiddle/viewport;\n    };\n\n    getDistanceFromMidPercentage = (height) => {\n        const dist = Math.abs(this.midPercentage - height);\n        const percentDiff = 1 - (dist/this.halfRange);\n\n        return Math.max(0, percentDiff);\n    };\n\n    render() {\n        const { props } = this;\n        const { src } = props;\n\n        return (\n            <div ref={this.ref}>\n                <PostImg src={src} {...props} />\n            </div>\n        );\n    }\n}\n\nPostImgColored.propTypes = {\n    src: PropTypes.string.isRequired,\n    bgColor: PropTypes.string.isRequired,\n};\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AA5DA;AA8DA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAvEA;AAyEA;AACA;AAEA;AACA;AACA;AA5EA;AAEA;AACA;AACA;AAEA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AAEA;AAHA;AAMA;AAKA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;;;AAgDA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAzFA;AACA;AADA;AA4FA;AACA;AACA;AAFA;;;;A","sourceRoot":""}